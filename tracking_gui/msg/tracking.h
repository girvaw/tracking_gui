// Generated by gencpp from file five_axis_tracking/tracking.msg
// DO NOT EDIT!


#ifndef FIVE_AXIS_TRACKING_MESSAGE_TRACKING_H
#define FIVE_AXIS_TRACKING_MESSAGE_TRACKING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace five_axis_tracking
{
template <class ContainerAllocator>
struct tracking_
{
  typedef tracking_<ContainerAllocator> Type;

  tracking_()
    : hue_upper(0)
    , hue_lower(0)
    , saturation_upper(0)
    , saturation_lower(0)
    , value_upper(0)
    , value_lower(0)
    , hough_min_dist(0)
    , hough_param_1(0)
    , hough_param_2(0)
    , show_hsv_window(false)
    , show_hough_depth_image(false)  {
    }
  tracking_(const ContainerAllocator& _alloc)
    : hue_upper(0)
    , hue_lower(0)
    , saturation_upper(0)
    , saturation_lower(0)
    , value_upper(0)
    , value_lower(0)
    , hough_min_dist(0)
    , hough_param_1(0)
    , hough_param_2(0)
    , show_hsv_window(false)
    , show_hough_depth_image(false)  {
  (void)_alloc;
    }



   typedef int16_t _hue_upper_type;
  _hue_upper_type hue_upper;

   typedef int16_t _hue_lower_type;
  _hue_lower_type hue_lower;

   typedef int16_t _saturation_upper_type;
  _saturation_upper_type saturation_upper;

   typedef int16_t _saturation_lower_type;
  _saturation_lower_type saturation_lower;

   typedef int16_t _value_upper_type;
  _value_upper_type value_upper;

   typedef int16_t _value_lower_type;
  _value_lower_type value_lower;

   typedef int16_t _hough_min_dist_type;
  _hough_min_dist_type hough_min_dist;

   typedef int16_t _hough_param_1_type;
  _hough_param_1_type hough_param_1;

   typedef int16_t _hough_param_2_type;
  _hough_param_2_type hough_param_2;

   typedef uint8_t _show_hsv_window_type;
  _show_hsv_window_type show_hsv_window;

   typedef uint8_t _show_hough_depth_image_type;
  _show_hough_depth_image_type show_hough_depth_image;





  typedef boost::shared_ptr< ::five_axis_tracking::tracking_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::five_axis_tracking::tracking_<ContainerAllocator> const> ConstPtr;

}; // struct tracking_

typedef ::five_axis_tracking::tracking_<std::allocator<void> > tracking;

typedef boost::shared_ptr< ::five_axis_tracking::tracking > trackingPtr;
typedef boost::shared_ptr< ::five_axis_tracking::tracking const> trackingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::five_axis_tracking::tracking_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::five_axis_tracking::tracking_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::five_axis_tracking::tracking_<ContainerAllocator1> & lhs, const ::five_axis_tracking::tracking_<ContainerAllocator2> & rhs)
{
  return lhs.hue_upper == rhs.hue_upper &&
    lhs.hue_lower == rhs.hue_lower &&
    lhs.saturation_upper == rhs.saturation_upper &&
    lhs.saturation_lower == rhs.saturation_lower &&
    lhs.value_upper == rhs.value_upper &&
    lhs.value_lower == rhs.value_lower &&
    lhs.hough_min_dist == rhs.hough_min_dist &&
    lhs.hough_param_1 == rhs.hough_param_1 &&
    lhs.hough_param_2 == rhs.hough_param_2 &&
    lhs.show_hsv_window == rhs.show_hsv_window &&
    lhs.show_hough_depth_image == rhs.show_hough_depth_image;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::five_axis_tracking::tracking_<ContainerAllocator1> & lhs, const ::five_axis_tracking::tracking_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace five_axis_tracking

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::five_axis_tracking::tracking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::five_axis_tracking::tracking_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::five_axis_tracking::tracking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::five_axis_tracking::tracking_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::five_axis_tracking::tracking_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::five_axis_tracking::tracking_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::five_axis_tracking::tracking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81d20065165db9dd5bce0b412decd7fc";
  }

  static const char* value(const ::five_axis_tracking::tracking_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81d20065165db9ddULL;
  static const uint64_t static_value2 = 0x5bce0b412decd7fcULL;
};

template<class ContainerAllocator>
struct DataType< ::five_axis_tracking::tracking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "five_axis_tracking/tracking";
  }

  static const char* value(const ::five_axis_tracking::tracking_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::five_axis_tracking::tracking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 hue_upper\n"
"int16 hue_lower\n"
"int16 saturation_upper\n"
"int16 saturation_lower\n"
"int16 value_upper\n"
"int16 value_lower\n"
"int16 hough_min_dist\n"
"int16 hough_param_1\n"
"int16 hough_param_2\n"
"bool show_hsv_window\n"
"bool show_hough_depth_image\n"
;
  }

  static const char* value(const ::five_axis_tracking::tracking_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::five_axis_tracking::tracking_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hue_upper);
      stream.next(m.hue_lower);
      stream.next(m.saturation_upper);
      stream.next(m.saturation_lower);
      stream.next(m.value_upper);
      stream.next(m.value_lower);
      stream.next(m.hough_min_dist);
      stream.next(m.hough_param_1);
      stream.next(m.hough_param_2);
      stream.next(m.show_hsv_window);
      stream.next(m.show_hough_depth_image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tracking_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::five_axis_tracking::tracking_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::five_axis_tracking::tracking_<ContainerAllocator>& v)
  {
    s << indent << "hue_upper: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hue_upper);
    s << indent << "hue_lower: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hue_lower);
    s << indent << "saturation_upper: ";
    Printer<int16_t>::stream(s, indent + "  ", v.saturation_upper);
    s << indent << "saturation_lower: ";
    Printer<int16_t>::stream(s, indent + "  ", v.saturation_lower);
    s << indent << "value_upper: ";
    Printer<int16_t>::stream(s, indent + "  ", v.value_upper);
    s << indent << "value_lower: ";
    Printer<int16_t>::stream(s, indent + "  ", v.value_lower);
    s << indent << "hough_min_dist: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hough_min_dist);
    s << indent << "hough_param_1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hough_param_1);
    s << indent << "hough_param_2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hough_param_2);
    s << indent << "show_hsv_window: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.show_hsv_window);
    s << indent << "show_hough_depth_image: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.show_hough_depth_image);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIVE_AXIS_TRACKING_MESSAGE_TRACKING_H
